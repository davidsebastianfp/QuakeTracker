// Generated by Dagger (https://dagger.dev).
package com.sebferna.android.feature.home.presentation;

import com.sebferna.android.core.commons.DateFormatter;
import com.sebferna.android.core.regions.api.RegionsController;
import com.sebferna.android.feature.home.domain.GetEarthQuakesUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<GetEarthQuakesUseCase> getEarthQuakesUseCaseProvider;

  private final Provider<DateFormatter> dateFormatterProvider;

  private final Provider<RegionsController> regionsControllerProvider;

  public HomeViewModel_Factory(Provider<GetEarthQuakesUseCase> getEarthQuakesUseCaseProvider,
      Provider<DateFormatter> dateFormatterProvider,
      Provider<RegionsController> regionsControllerProvider) {
    this.getEarthQuakesUseCaseProvider = getEarthQuakesUseCaseProvider;
    this.dateFormatterProvider = dateFormatterProvider;
    this.regionsControllerProvider = regionsControllerProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(getEarthQuakesUseCaseProvider.get(), dateFormatterProvider.get(), regionsControllerProvider.get());
  }

  public static HomeViewModel_Factory create(
      Provider<GetEarthQuakesUseCase> getEarthQuakesUseCaseProvider,
      Provider<DateFormatter> dateFormatterProvider,
      Provider<RegionsController> regionsControllerProvider) {
    return new HomeViewModel_Factory(getEarthQuakesUseCaseProvider, dateFormatterProvider, regionsControllerProvider);
  }

  public static HomeViewModel newInstance(GetEarthQuakesUseCase getEarthQuakesUseCase,
      DateFormatter dateFormatter, RegionsController regionsController) {
    return new HomeViewModel(getEarthQuakesUseCase, dateFormatter, regionsController);
  }
}
